// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license.

// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Bot.Connector.DirectLine
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    

    /// <summary>
    /// Extension methods for Conversations.
    /// </summary>
    public static partial class ConversationsExtensions
    {
            /// <summary>
            /// Start a new conversation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Conversation StartConversation(this IConversations operations)
            {
                return Task.Factory.StartNew(s => ((IConversations)s).StartConversationAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start a new conversation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Conversation> StartConversationAsync(this IConversations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartConversationWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get information about an existing conversation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='conversationId'>
            /// </param>
            /// <param name='watermark'>
            /// </param>
            public static Conversation ReconnectToConversation(this IConversations operations, string conversationId, string watermark = default(string))
            {
                return Task.Factory.StartNew(s => ((IConversations)s).ReconnectToConversationAsync(conversationId, watermark), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get information about an existing conversation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='conversationId'>
            /// </param>
            /// <param name='watermark'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Conversation> ReconnectToConversationAsync(this IConversations operations, string conversationId, string watermark = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReconnectToConversationWithHttpMessagesAsync(conversationId, watermark, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get activities in this conversation. This method is paged with the
            /// 'watermark' parameter.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='conversationId'>
            /// Conversation ID
            /// </param>
            /// <param name='watermark'>
            /// (Optional) only returns activities newer than this watermark
            /// </param>
            public static ActivitySet GetActivities(this IConversations operations, string conversationId, string watermark = default(string))
            {
                return Task.Factory.StartNew(s => ((IConversations)s).GetActivitiesAsync(conversationId, watermark), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get activities in this conversation. This method is paged with the
            /// 'watermark' parameter.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='conversationId'>
            /// Conversation ID
            /// </param>
            /// <param name='watermark'>
            /// (Optional) only returns activities newer than this watermark
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ActivitySet> GetActivitiesAsync(this IConversations operations, string conversationId, string watermark = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActivitiesWithHttpMessagesAsync(conversationId, watermark, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Send an activity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='conversationId'>
            /// Conversation ID
            /// </param>
            /// <param name='activity'>
            /// Activity to send
            /// </param>
            public static ResourceResponse PostActivity(this IConversations operations, string conversationId, Activity activity)
            {
                return Task.Factory.StartNew(s => ((IConversations)s).PostActivityAsync(conversationId, activity), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send an activity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='conversationId'>
            /// Conversation ID
            /// </param>
            /// <param name='activity'>
            /// Activity to send
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceResponse> PostActivityAsync(this IConversations operations, string conversationId, Activity activity, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostActivityWithHttpMessagesAsync(conversationId, activity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Upload file(s) and send as attachment(s)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='conversationId'>
            /// </param>
            /// <param name='file'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            public static ResourceResponse Upload(this IConversations operations, string conversationId, System.IO.Stream file, string userId = default(string), string contentType = null)
            {
                return Task.Factory.StartNew(s => ((IConversations)s).UploadAsync(conversationId, file, userId, contentType), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Upload file(s) and send as attachment(s)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='conversationId'>
            /// </param>
            /// <param name='file'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceResponse> UploadAsync(this IConversations operations, string conversationId, System.IO.Stream file, string userId = default(string), string contentType = null, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadWithHttpMessagesAsync(conversationId, file, userId, contentType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
